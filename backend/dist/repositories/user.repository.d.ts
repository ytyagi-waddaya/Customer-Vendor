import { CreateDetailsInput, CreateTempUser, CreateUser } from "../types/user";
export declare const userRepository: {
    create: ({ firstName, lastName, email, password, username }: CreateUser) => import(".prisma/client").Prisma.Prisma__UserClient<{
        firstName: string | null;
        lastName: string | null;
        email: string | null;
        password: string | null;
        username: string;
        tempPassword: string | null;
        id: string;
        tempExpiresAt: Date | null;
        isTempUser: boolean;
        phone: string | null;
        avatarUrl: string | null;
        isVerified: boolean;
        isAdmin: boolean;
        isDeleted: boolean;
        deletedAt: Date | null;
        resetPasswordToken: string | null;
        resetPasswordTokenExpiresAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    }, never, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
    getById: (id: string) => import(".prisma/client").Prisma.Prisma__UserClient<{
        firstName: string | null;
        lastName: string | null;
        email: string | null;
        password: string | null;
        username: string;
        tempPassword: string | null;
        id: string;
        tempExpiresAt: Date | null;
        isTempUser: boolean;
        phone: string | null;
        avatarUrl: string | null;
        isVerified: boolean;
        isAdmin: boolean;
        isDeleted: boolean;
        deletedAt: Date | null;
        resetPasswordToken: string | null;
        resetPasswordTokenExpiresAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    } | null, null, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
    getUsers: () => import(".prisma/client").Prisma.PrismaPromise<{
        firstName: string | null;
        lastName: string | null;
        email: string | null;
        password: string | null;
        username: string;
        tempPassword: string | null;
        id: string;
        tempExpiresAt: Date | null;
        isTempUser: boolean;
        phone: string | null;
        avatarUrl: string | null;
        isVerified: boolean;
        isAdmin: boolean;
        isDeleted: boolean;
        deletedAt: Date | null;
        resetPasswordToken: string | null;
        resetPasswordTokenExpiresAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    }[]>;
    getByEmail: (email: string) => import(".prisma/client").Prisma.Prisma__UserClient<{
        firstName: string | null;
        lastName: string | null;
        email: string | null;
        password: string | null;
        username: string;
        tempPassword: string | null;
        id: string;
        tempExpiresAt: Date | null;
        isTempUser: boolean;
        phone: string | null;
        avatarUrl: string | null;
        isVerified: boolean;
        isAdmin: boolean;
        isDeleted: boolean;
        deletedAt: Date | null;
        resetPasswordToken: string | null;
        resetPasswordTokenExpiresAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    } | null, null, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
    getByEmailOrUsername: (email: string, username: string) => import(".prisma/client").Prisma.Prisma__UserClient<{
        firstName: string | null;
        lastName: string | null;
        email: string | null;
        password: string | null;
        username: string;
        tempPassword: string | null;
        id: string;
        tempExpiresAt: Date | null;
        isTempUser: boolean;
        phone: string | null;
        avatarUrl: string | null;
        isVerified: boolean;
        isAdmin: boolean;
        isDeleted: boolean;
        deletedAt: Date | null;
        resetPasswordToken: string | null;
        resetPasswordTokenExpiresAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    } | null, null, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
    createTempUser: ({ username, tempPassword }: CreateTempUser) => import(".prisma/client").Prisma.Prisma__UserClient<{
        firstName: string | null;
        lastName: string | null;
        email: string | null;
        password: string | null;
        username: string;
        tempPassword: string | null;
        id: string;
        tempExpiresAt: Date | null;
        isTempUser: boolean;
        phone: string | null;
        avatarUrl: string | null;
        isVerified: boolean;
        isAdmin: boolean;
        isDeleted: boolean;
        deletedAt: Date | null;
        resetPasswordToken: string | null;
        resetPasswordTokenExpiresAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    }, never, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
    UpdateToAdmin: (isAdmin: boolean, userId: string) => import(".prisma/client").Prisma.Prisma__UserClient<{
        firstName: string | null;
        lastName: string | null;
        email: string | null;
        password: string | null;
        username: string;
        tempPassword: string | null;
        id: string;
        tempExpiresAt: Date | null;
        isTempUser: boolean;
        phone: string | null;
        avatarUrl: string | null;
        isVerified: boolean;
        isAdmin: boolean;
        isDeleted: boolean;
        deletedAt: Date | null;
        resetPasswordToken: string | null;
        resetPasswordTokenExpiresAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    }, never, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
    createDetails: ({ userId, productname, description }: CreateDetailsInput) => import(".prisma/client").Prisma.Prisma__DetailClient<{
        userId: string;
        productname: string;
        description: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }, never, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
};
//# sourceMappingURL=user.repository.d.ts.map