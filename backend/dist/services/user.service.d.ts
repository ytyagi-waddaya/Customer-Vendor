import { CreateDetails, CreateUserInput, LoginUser } from "../types/user";
export declare const userService: {
    register: (input: CreateUserInput) => Promise<{
        firstName: string | null;
        lastName: string | null;
        email: string | null;
        password: string | null;
        username: string;
        tempPassword: string | null;
        id: string;
        tempExpiresAt: Date | null;
        isTempUser: boolean;
        phone: string | null;
        avatarUrl: string | null;
        isVerified: boolean;
        isAdmin: boolean;
        isDeleted: boolean;
        deletedAt: Date | null;
        resetPasswordToken: string | null;
        resetPasswordTokenExpiresAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    getUserById: (id: string) => Promise<{
        firstName: string | null;
        lastName: string | null;
        email: string | null;
        password: string | null;
        username: string;
        tempPassword: string | null;
        id: string;
        tempExpiresAt: Date | null;
        isTempUser: boolean;
        phone: string | null;
        avatarUrl: string | null;
        isVerified: boolean;
        isAdmin: boolean;
        isDeleted: boolean;
        deletedAt: Date | null;
        resetPasswordToken: string | null;
        resetPasswordTokenExpiresAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    } | null>;
    getUsers: () => Promise<{
        firstName: string | null;
        lastName: string | null;
        email: string | null;
        password: string | null;
        username: string;
        tempPassword: string | null;
        id: string;
        tempExpiresAt: Date | null;
        isTempUser: boolean;
        phone: string | null;
        avatarUrl: string | null;
        isVerified: boolean;
        isAdmin: boolean;
        isDeleted: boolean;
        deletedAt: Date | null;
        resetPasswordToken: string | null;
        resetPasswordTokenExpiresAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    }[]>;
    getUserByEmail: (email: string) => Promise<{
        firstName: string | null;
        lastName: string | null;
        email: string | null;
        password: string | null;
        username: string;
        tempPassword: string | null;
        id: string;
        tempExpiresAt: Date | null;
        isTempUser: boolean;
        phone: string | null;
        avatarUrl: string | null;
        isVerified: boolean;
        isAdmin: boolean;
        isDeleted: boolean;
        deletedAt: Date | null;
        resetPasswordToken: string | null;
        resetPasswordTokenExpiresAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    } | null>;
    createTempUser: (email: string) => Promise<{
        rawPassword: string;
        firstName: string | null;
        lastName: string | null;
        email: string | null;
        password: string | null;
        username: string;
        tempPassword: string | null;
        id: string;
        tempExpiresAt: Date | null;
        isTempUser: boolean;
        phone: string | null;
        avatarUrl: string | null;
        isVerified: boolean;
        isAdmin: boolean;
        isDeleted: boolean;
        deletedAt: Date | null;
        resetPasswordToken: string | null;
        resetPasswordTokenExpiresAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    login: ({ username, email, password }: LoginUser) => Promise<{
        user: {
            id: string;
            username: string;
            email: string | null;
        };
        token: string;
    }>;
    updateToAdmin: (isAdmin: boolean, userId: string) => Promise<{
        firstName: string | null;
        lastName: string | null;
        email: string | null;
        password: string | null;
        username: string;
        tempPassword: string | null;
        id: string;
        tempExpiresAt: Date | null;
        isTempUser: boolean;
        phone: string | null;
        avatarUrl: string | null;
        isVerified: boolean;
        isAdmin: boolean;
        isDeleted: boolean;
        deletedAt: Date | null;
        resetPasswordToken: string | null;
        resetPasswordTokenExpiresAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    details: (input: CreateUserInput, details: CreateDetails) => Promise<{
        userresponse: {
            firstName: string | null;
            lastName: string | null;
            email: string | null;
            password: string | null;
            username: string;
            tempPassword: string | null;
            id: string;
            tempExpiresAt: Date | null;
            isTempUser: boolean;
            phone: string | null;
            avatarUrl: string | null;
            isVerified: boolean;
            isAdmin: boolean;
            isDeleted: boolean;
            deletedAt: Date | null;
            resetPasswordToken: string | null;
            resetPasswordTokenExpiresAt: Date | null;
            createdAt: Date;
            updatedAt: Date;
        };
        detailsresponse: {
            userId: string;
            productname: string;
            description: string;
            id: string;
            createdAt: Date;
            updatedAt: Date;
        };
    }>;
};
//# sourceMappingURL=user.service.d.ts.map